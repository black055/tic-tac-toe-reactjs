{"version":3,"sources":["index.js"],"names":["Square","props","highlight","className","onClick","value","Board","i","this","line","includes","squares","boardHTML","size","temp","j","push","renderSquare","React","Component","Game","handleChangeSize","bind","handleSort","state","history","Array","fill","newMark","xIsNext","stepNumber","winner","isIncre","slice","length","calculateWinner","k","row","col","setState","concat","player","step","e","target","status","current","moves","map","move","desc","Math","floor","jumpTo","type","min","defaultValue","onChange","handleClick","reverse","checkLine","streakToWin","newSquares","result","sqrt","to2DSquare","parseInt","isWin","point","diagonal","lastPoint","x","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fff898f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n  function Square(props) {\r\n    if (props.highlight) {\r\n      return (\r\n        <button\r\n            className=\"square highlight\"\r\n            onClick={() => props.onClick()}\r\n        >\r\n          <strong>{props.value}</strong>\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n            className=\"square\"\r\n            onClick={() => props.onClick()}\r\n        >\r\n          {props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      if (this.props.line.includes(i)) {\r\n        return <Square\r\n                  key={i}\r\n                  highlight={true}\r\n                  value={this.props.squares[i]}\r\n                  onClick={() => this.props.onClick(i)}\r\n             />;\r\n      } else\r\n        return <Square\r\n                  key={i}\r\n                  highlight={false}\r\n                  value={this.props.squares[i]}\r\n                  onClick={() => this.props.onClick(i)}\r\n              />;\r\n    }\r\n  \r\n    render() {\r\n\r\n        let boardHTML = [];\r\n\r\n        for (let i = 0; i < this.props.size; i++) {\r\n            let temp = [];\r\n            for (let j = 0; j < this.props.size; j++) {\r\n                temp.push( this.renderSquare(this.props.size*i + j) );\r\n            }\r\n            boardHTML.push(<div key={'row_'+i} className=\"board-row\">{temp}</div>);\r\n        }\r\n\r\n        return (<div>{boardHTML}</div>);\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChangeSize = this.handleChangeSize.bind(this);\r\n        this.handleSort = this.handleSort.bind(this);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                newMark: null,\r\n                }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            size: 3,\r\n            winner: null,\r\n            line: [],\r\n            isIncre: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares, this.state.size) != null || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        let winner = calculateWinner(squares, this.state.size);\r\n        if (winner) {\r\n          \r\n          let line = [];\r\n          for (let k = 0; k < winner.line.length; k++) {\r\n            line.push(winner.line[k].row * this.state.size + winner.line[k].col);\r\n          }\r\n          this.setState({\r\n            history: history.concat([{ squares: squares, newMark: i  }]),\r\n            stepNumber: history.length,\r\n            winner: winner.player,\r\n            line: line,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            history: history.concat([{ squares: squares, newMark: i }]),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length,\r\n          });\r\n        }\r\n    }\r\n\r\n    jumpTo(step) {\r\n      const history = this.state.history.slice(0, step + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      let winner = calculateWinner(squares, this.state.size);\r\n      if (winner != null) {\r\n        let line = [];\r\n          for (let k = 0; k < winner.line.length; k++) {\r\n            line.push(winner.line[k].row * this.state.size + winner.line[k].col);\r\n          }\r\n        this.setState({\r\n          stepNumber: step,\r\n          xIsNext: (step % 2) === 0,\r\n          winner: winner.player,\r\n          line: line,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          stepNumber: step,\r\n          xIsNext: (step % 2) === 0,\r\n          winner: null,\r\n          line: [],\r\n        });\r\n      }\r\n        \r\n    }\r\n\r\n    handleChangeSize(e) {\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(e.target.value**2).fill(null),\r\n                }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            size: e.target.value,\r\n            winner: null,\r\n            line: [],\r\n        });\r\n    }\r\n\r\n    handleSort() {\r\n      this.setState( {\r\n        isIncre: !this.state.isIncre\r\n      } );\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history; \r\n        const current = history[this.state.stepNumber];\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n              'Go to move #' + move + ' (' + Math.floor(step.newMark / this.state.size) + ', ' + step.newMark % this.state.size + ')':\r\n              'Go to game start';\r\n\r\n            if (move === this.state.stepNumber) return (\r\n                <li key={move}>\r\n                  <button onClick={() => this.jumpTo(move)}><strong>{desc}</strong></button>\r\n                </li>\r\n            );\r\n            else return (\r\n              <li key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n              </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (this.state.winner != null) {\r\n          status = 'Winner: ' + this.state.winner;\r\n        } else {\r\n          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }    \r\n\r\n      return (\r\n        <div className=\"screen\">\r\n            <div className=\"game-size-controller\">\r\n                <span>Size of the game: \r\n                    <input type=\"number\" min=\"3\" defaultValue=\"3\" className=\"input-number\"\r\n                    onChange={this.handleChangeSize} />\r\n                </span>\r\n            </div>\r\n\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        line={this.state.line}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        size={this.state.size} \r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button className=\"sort-button\" onClick={this.handleSort}><strong>Sort: </strong> {(this.state.isIncre) ? 'increasing' : 'decreasing'} </button>\r\n                    <div className=\"text\">History list: location each move in <strong>(row, col)</strong> format</div>\r\n                    <ol >{(this.state.isIncre) ? moves : moves.reverse()}</ol>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function to2DSquare(squares) {\r\n    let result = Array(Math.sqrt(squares.length));\r\n    for (let i = 0; i < result.length; i++) {\r\n      result[i] = Array(Math.sqrt(squares.length)).fill(null);\r\n    }\r\n\r\n    for (let i = 0; i < result.length; i++) {\r\n      for (let j = 0; j < result.length; j++) {\r\n        result[i][j] = squares[i*result.length + j];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function checkLine(line, streakToWin) {\r\n    for (let i = 0, j = 0; i < line.length - 1; i = j) {\r\n      if (line[i] != null) {\r\n        for (j = i + 1; j < line.length && line[j] === line[i]; j++) { }\r\n        // Nếu chuỗi kí tự đã đủ điều kiện thắng\r\n        if (j - i >= streakToWin) {\r\n          return line.length - j;\r\n        }\r\n      } else j = i + 1;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function calculateWinner(squares, size){\r\n    let newSquares = to2DSquare(squares);\r\n    let streakToWin = (size > 5) ? 5 : parseInt(size);\r\n    // Kiểm tra các dòng\r\n    for (let i = 0; i< newSquares.length; i++) {\r\n      let isWin = checkLine(newSquares[i], streakToWin);\r\n      if (isWin != null) {\r\n        let line = [];\r\n        for (let point = 0; point < streakToWin; point++) {\r\n          line.push({\r\n            row: i,\r\n            col: newSquares.length - isWin - 1 - point,\r\n          });\r\n        }\r\n        let result = {\r\n          player: newSquares[i][newSquares.length - 1 - isWin],\r\n          line: line,\r\n        };\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // Kiểm tra các cột\r\n    for (let i = 0; i< newSquares.length; i++) {\r\n      let isWin = checkLine(newSquares.map(e => e[i]), streakToWin);\r\n      if (isWin != null) {\r\n        let line = [];\r\n        for (let point = 0; point < streakToWin; point++) {\r\n          line.push({\r\n            row: newSquares.length - isWin - 1 - point,\r\n            col: i,\r\n          });\r\n        }\r\n        let result = {\r\n          player: newSquares.map(e => e[i])[newSquares.length - 1 - isWin],\r\n          line: line,\r\n        };\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // Kiểm tra đường chéo theo hướng /\r\n    for (let i = 0; i < 2 * newSquares.length - 1; i++) {\r\n      let diagonal = [];\r\n      let lastPoint;\r\n      for (let j = 0; j < newSquares.length; j++) {\r\n        let x = i - j;\r\n        if (x >= 0 && x < newSquares.length) {\r\n          diagonal.push(newSquares[j][x]);\r\n          lastPoint = {\r\n            row: j,\r\n            col: x,\r\n          }\r\n        }\r\n      }\r\n\r\n      let isWin = checkLine(diagonal, streakToWin);\r\n      if (isWin != null) {\r\n        let line = [];\r\n        for (let point = 0; point < streakToWin; point++) {\r\n          if (size > 5) {\r\n            line.push({\r\n              row: lastPoint.row - isWin - point,\r\n              col: lastPoint.col + isWin + point,\r\n            });\r\n          } else {\r\n            line.push({\r\n              row: lastPoint.row - point,\r\n              col: lastPoint.col + point,\r\n            });\r\n          }\r\n        }\r\n        let result = {\r\n          player: diagonal[diagonal.length - 1 - isWin],\r\n          line: line,\r\n        };\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // Kiểm tra đường chéo theo hướng \\\r\n    for (let i = 0; i < 2 * newSquares.length - 1; i++) {\r\n      let diagonal = [];\r\n      let lastPoint;\r\n      for (let j = 0; j < newSquares.length; j++) {\r\n        let x = i - (newSquares.length - 1 - j);\r\n        if (x >= 0 && x < newSquares.length) {\r\n          diagonal.push(newSquares[j][x]);\r\n          lastPoint = {\r\n            row: j,\r\n            col: x,\r\n          }\r\n        }\r\n      }\r\n      \r\n      let isWin = checkLine(diagonal, streakToWin);\r\n      if (isWin != null) {\r\n        let line = [];\r\n        for (let point = 0; point < streakToWin; point++) {\r\n          if (size > 5) {\r\n            line.push({\r\n              row: lastPoint.row - isWin - point,\r\n              col: lastPoint.col - isWin - point,\r\n            });\r\n          } else {\r\n            line.push({\r\n              row: lastPoint.row - point,\r\n              col: lastPoint.col - point,\r\n            })\r\n          }\r\n        }\r\n        let result = {\r\n          player: diagonal[diagonal.length - 1 - isWin],\r\n          line: line,\r\n        };\r\n        return result;\r\n      }\r\n    }\r\n\r\n    if (squares.includes(null) === false) {\r\n      let result = {\r\n        player: 'draw',\r\n        line: [],\r\n      }\r\n      return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );  "],"sourceRoot":""}